#!/bin/bash

show_help(){
    help="  NAME
    ba_scan - script to run sim/reco for prtdirc

  SYNOPSIS
    ba_scan [OPTION]

  DESCRIPTION 
     -r 
        run type
        0 - run decoding
        1 - run calibration
        2 - run proc data
        3 - run simulation
        4 - run proc sim
     -j
        number of threads 
     -s 
        study
        0 - all
        # - study id
     -n 
        silent run"
    echo "$help" 
}

OPTIND=1 
while getopts "h?r:j:s:n" opt; do
    case "$opt" in
	h|\?)
            show_help
            exit 0
            ;;
	j)  threads=$OPTARG
            ;;
	s)  study=$OPTARG
	    ;;
	r)  run=$OPTARG
            ;;
	n)  silent=1
            ;;
    esac
done
threads=${threads:-6}
run=${run:-0}
study=${study:-1}
silent=${silent:-0}

shift $((OPTIND-1))

data=6
if [ ${run} == "4" ]; then
    data=7
fi

printf "====== Run dirc data processing ======\n"

if [ ${run} == "0" ]; then
    cd $study
    for x in $(ls *.hld); do
	if [ ! -f "${x%.*}.hld.root" ]; then
	    hldtools -j10 -d $x
	fi
    done
    exit
fi

if [ ${run} == "1" ]; then
    cd $study
    for x in $(ls *.hld.root); do
	if [ ! -f  ${x%.*.*}"C0.root" ]; then
	    tcalibration -j10 -c ../calib/calibf_june.root -t ../calib/calibo_june.root -j10 $x
	fi
    done
    exit
fi

waitForMe (){
    while : 
    do 
	activth=$(ps aux | grep "[p]rocData\|[p]rtdirc" | wc -l)
	printf "\r$statusline [$activth] ---- [$(($(date +%s) - start_time)) s] "
	sleep .1
	if [ "$activth" -lt "$1" ]; then 
	    break  
	fi
    done
}

processOneSim (){
	OIFS="$IFS"
	IFS=$'\n'
	
	file=($(root -l -q -b $HOME/dirc/prttools/datainfo.C+"($1,0)" 2>/dev/null))
	args=($(root -l -q -b $HOME/dirc/prttools/datainfo.C+"($1,3)" 2>/dev/null))

	IFS="$OIFS"
        mkdir -p "$1"
	
	statusline="run study $1"
	
	for ((fk=1;fk<${#file[@]};fk++)); do
	   ./prtdirc -o "${1}/${file[fk]}S.root" ${args[k]} -x "proton" -e 2000 -b 1  > "${1}/${file[fk]}.log" &
	   waitForMe $threads
	done
}

processOneReco (){
    if [ -d $1 ]; then
	OIFS="$IFS"
	IFS=$'\n'
	
	file=($(root -l -q -b $HOME/dirc/prttools/datainfo.C+"($1,0)" 2>/dev/null))
	reco=($(root -l -q -b $HOME/dirc/prttools/datainfo.C+"($1,$data)" 2>/dev/null))

	#path=($(root -l -q -b $HOME/dirc/prttools/datainfo.C+"($1,1)" 2>/dev/null))
	#info=($(root -l -q -b $HOME/dirc/prttools/datainfo.C+"($1,2)" 2>/dev/null))
	#args=($(root -l -q -b $HOME/dirc/prttools/datainfo.C+"($1,3)" 2>/dev/null))
	#outs=($(root -l -q -b $HOME/dirc/prttools/datainfo.C+"($1,4)" 2>/dev/null))
	
	IFS="$OIFS"
	
	statusline="run study $1"
	cd ~/dirc/prttools > /dev/null 
	for ((fk=1;fk<${#file[@]};fk++)); do
	    root -l -q -b loadprtlibs.C procData.C+"(${reco[fk]})" > log 2> log &
	    waitForMe $threads
	done
	cd - > /dev/null 
    fi
}  

start_time=$(date +%s)
if [ ${run} == "3" ]; then
    cd ~/dirc/prtdirc/build > /dev/null 
    if (( $study == 0 )); then
	OIFS="$IFS"
	IFS=$'\n'
	allstudies=($(root -l -q -b $HOME/dirc/prttools/datainfo.C+"(150,11)" 2>/dev/null))
	IFS="$OIFS"
	for ((k=1;k<${#allstudies[@]};k++)); do
	    processOneSim ${allstudies[k]}
	done
    else
	processOneSim $study 
    fi
    cd - > /dev/null 
    waitForMe "1"
    printf "\r$statusline [-] done [$(($(date +%s) - start_time)) s]     \n"
else
    cd ~/dirc/prttools > /dev/null 
    root -l -q -b $HOME/dirc/prttools/datainfo.C++  > log 2>log 
    root -l -q -b loadprtlibs.C procData.C++  > log 2>log
    cd - > /dev/null 
    if (( $study == 0 )); then
	OIFS="$IFS"
	IFS=$'\n'
	allstudies=($(root -l -q -b $HOME/dirc/prttools/datainfo.C+"(150,11)" 2>/dev/null))
	IFS="$OIFS"
	for ((k=1;k<${#allstudies[@]};k++)); do
	    processOneReco ${allstudies[k]}
	done
	waitForMe "1" && sleep 2
	for ((k=1;k<${#allstudies[@]};k++)); do
	    cd ${allstudies[k]}
	    rm -f res_${allstudies[k]}.root
	    hadd res_${allstudies[k]}.root *.root.res.root
	    rm -f *.root.res.root
	    cd -
	done
    else
	processOneReco $study

	waitForMe "1" && sleep 2
	cd $study
	rm -f res_${study}.root
	hadd res_${study}.root *.root.res.root
	rm -f *.root.res.root
	cd -
    fi

    printf "\r$statusline [-] done [$(($(date +%s) - start_time)) s]     \n"
fi


